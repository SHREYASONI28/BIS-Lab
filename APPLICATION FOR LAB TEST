#APPLICATION FOR LAB TEST
#segment an image into meaningful regions or objects by applying parallel cellular algorithm that analyze pixel relationship and group similar pixels together based on color texture or intensity
import numpy as np
from skimage import io, color, filters, segmentation
from joblib import Parallel, delayed
import matplotlib.pyplot as plt
from google.colab import files
import os

# Function to upload image in Colab
def upload_image():
    uploaded = files.upload()
    for filename in uploaded.keys():
        return filename

# Load and preprocess the image
def load_image(image_path):
    image = io.imread(image_path)
    if len(image.shape) == 3:  # Convert to grayscale if not already
        image = color.rgb2gray(image)
    return image

# Cellular algorithm for analyzing pixel relationships
def analyze_pixel_region(image, row, col, window_size):
    half_window = window_size // 2
    region = image[max(0, row-half_window):min(row+half_window+1, image.shape[0]),
                   max(0, col-half_window):min(col+half_window+1, image.shape[1])]
    return np.mean(region), np.std(region)

# Parallel processing for cellular analysis
def process_image_in_parallel(image, window_size):
    rows, cols = image.shape
    output = np.zeros_like(image)

    def process_pixel(row, col):
        mean, std = analyze_pixel_region(image, row, col, window_size)
        return mean  # Use mean as a representative feature (or modify as needed)

    results = Parallel(n_jobs=-1)(
        delayed(process_pixel)(row, col) for row in range(rows) for col in range(cols)
    )

    return np.array(results).reshape(rows, cols)

# Segment the processed image into meaningful regions
def segment_image(processed_image):
    thresh = filters.threshold_otsu(processed_image)
    binary_segmented = processed_image > thresh
    return segmentation.clear_border(binary_segmented)

# Main execution
if __name__ == "__main__":
    # Upload the image
    print("Please upload an image file:")
    image_path = upload_image()

    # Load the image
    image = load_image(image_path)

    # Process the image using the cellular algorithm
    window_size = 5  # Adjust window size for grouping analysis
    processed_image = process_image_in_parallel(image, window_size)

    # Segment the processed image
    segmented_image = segment_image(processed_image)

    # Display the results
    fig, ax = plt.subplots(1, 3, figsize=(15, 5))
    ax[0].imshow(image, cmap='gray')
    ax[0].set_title("Original Image")
    ax[0].axis('off')

    ax[1].imshow(processed_image, cmap='gray')
    ax[1].set_title("Processed Image")
    ax[1].axis('off')

    ax[2].imshow(segmented_image, cmap='gray')
    ax[2].set_title("Segmented Image")
    ax[2].axis('off')

    plt.tight_layout()
    plt.show()

    # Clean up uploaded file
    os.remove(image_path)

OUTPUT:
PDF APPLICATION OUTPUT
